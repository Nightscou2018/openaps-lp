[device "pump"]
vendor = openaps.vendors.medtronic
extra = pump.ini

[device "ns"]
vendor = openaps.vendors.process
extra = ns.ini

[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[device "tz"]
vendor = openapscontrib.timezones
extra = tz.ini

[report "last_four_pump_hours.json"]
device = pump
hours = 4.0
use = iter_pump_hours
reporter = JSON

[report "monitor/clock-zoned.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
input = monitor/clock.json
device = tz
timezone = 

[report "monitor/clock.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
timezone = PDT
device = tz
input = raw-pump/clock-raw.json

[report "monitor/glucose.json"]
use = rezone
reporter = JSON
astimezone = True
date = timestamp dateString start_at end_at created_at system_time display_time
adjust = missing
timezone = 
device = tz
input = nightscout/glucose-raw.json

[report "raw-pump/clock-raw.json"]
	device = pump
use = read_clock
reporter = JSON

[alias]
rm-warmup = ! bash -c "rm -f model.json monitor/clock.json > /dev/null"
warmup = report invoke model.json raw-pump/clock-raw.json monitor/clock.json
fail-warmup = ! bash -c "echo PREFLIGHT FAIL; exit 1"
preflight = ! bash -c "(echo PREFLIGHT ) && openaps warmup 2>&1 >/dev/null && grep -q T monitor/clock.json && echo PREFLIGHT OK || openaps fail-warmup"
monitor-cgm = report invoke nightscout/glucose-raw.json monitor/glucose.json
monitor-pump-history = report invoke raw-pump/pump-history-raw.json monitor/pump-history.json
get-basal-status = report invoke monitor/temp-basal-status.json
get-pump-details = report invoke monitor/reservoir.json monitor/status.json monitor/battery.json
get-settings = report invoke raw-pump/bg-targets-raw.json settings/bg-targets.json raw-pump/insulin-sensitivities-raw.json settings/insulin-sensitivities.json raw-pump/selected-basal-profile.json settings/selected-basal-profile.json raw-pump/settings.json settings/settings.json
get-settings-orig = report invoke raw-pump/bg-targets-raw.json settings/bg-targets.json raw-pump/insulin-sensitivities-raw.json settings/insulin-sensitivities.json raw-pump/selected-basal-profile.json raw-pump/settings.json settings/selected-basal-profile.json settings/settings.json
gather-pump-data = ! bash -c "openaps get-basal-status; openaps get-pump-details; openaps monitor-pump-history;  openaps get-settings"
gather-clean-data = ! bash -c "openaps monitor-cgm && openaps gather-pump-data"
do-oref0 = ! echo DO Disabled
enact-oref0 = ! echo ENACT Disabled
do-everything = ! bash -c "(openaps preflight && openaps gather-clean-data && openaps do-oref0 && openaps enact-oref0);  openaps report-night$
ping = ! bash -c "echo PONG! $*" --
pong = ! echo PONG
hello = ! echo hello
okbar = ! bash -c "echo $1" --
report-nightscout = report invoke nightscout/preflight.json nightscout/openaps-status.json nightscout/recent-treatments.json nightscout/uploaded.json nightscout/recent-missing-entries.json nightscout/uploaded-entries.json

[report "model.json"]
device = pump
use = model
reporter = JSON

[report "raw-pump/bg-targets-raw.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "settings/bg-targets.json"]
device = units
to = mg/dL
use = bg_targets
input = raw-pump/bg-targets-raw.json
reporter = JSON

[report "raw-pump/insulin-sensitivities-raw.json"]
device = pump
use = read_insulin_sensitivities
reporter = JSON

[report "settings/insulin-sensitivities.json"]
device = units
to = mg/dL
use = insulin_sensitivities
input = raw-pump/insulin-sensitivities-raw.json
reporter = JSON

[report "monitor/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "oref0-predict/oref0.json"]
use = shell
oref0-iob = oref0-monitor/iob.json
temp-basal = monitor/temp-basal-status.json
reporter = text
json_default = True
oref0-profile = oref0-monitor/profile.json
device = determine-basal
remainder = 
glucose = monitor/glucose.json

[report "raw-pump/pump-history-raw.json"]
hours = 8.0
device = pump
use = iter_pump_hours
reporter = JSON

[repo[device "pump"]
vendor = openaps.vendors.medtronic
extra = pump.ini

[device "ns"]
vendor = openaps.vendors.process
extra = ns.ini

[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[device "tz"]
vendor = openapscontrib.timezones
extra = tz.ini

[report "last_four_pump_hours.json"]
device = pump
hours = 4.0
use = iter_pump_hours
reporter = JSON

[report "monitor/clock-zoned.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
input = monitor/clock.json
device = tz
timezone = 

[report "monitor/clock.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
timezone = PDT
device = tz
input = raw-pump/clock-raw.json

[report "monitor/glucose.json"]
use = rezone
reporter = JSON
astimezone = True
date = timestamp dateString start_at end_at created_at system_time display_time
adjust = missing
timezone = 
device = tz
input = nightscout/glucose-raw.json

[report "raw-pump/clock-raw.json"]
	device = pump
use = read_clock
reporter = JSON

[alias]
rm-warmup = ! bash -c "rm -f model.json monitor/clock.json > /dev/null"
warmup = report invoke model.json raw-pump/clock-raw.json monitor/clock.json
fail-warmup = ! bash -c "echo PREFLIGHT FAIL; exit 1"
preflight = ! bash -c "(echo PREFLIGHT ) && openaps warmup 2>&1 >/dev/null && grep -q T monitor/clock.json && echo PREFLIGHT OK || openaps fail-warmup"
monitor-cgm = report invoke nightscout/glucose-raw.json monitor/glucose.json
monitor-pump-history = report invoke raw-pump/pump-history-raw.json monitor/pump-history.json
get-basal-status = report invoke monitor/temp-basal-status.json
get-pump-details = report invoke monitor/reservoir.json monitor/status.json monitor/battery.json
get-settings = report invoke raw-pump/bg-targets-raw.json settings/bg-targets.json raw-pump/insulin-sensitivities-raw.json settings/insulin-sensitivities.json raw-pump/selected-basal-profile.json settings/selected-basal-profile.json raw-pump/settings.json settings/settings.json
get-settings-orig = report invoke raw-pump/bg-targets-raw.json settings/bg-targets.json raw-pump/insulin-sensitivities-raw.json settings/insulin-sensitivities.json raw-pump/selected-basal-profile.json raw-pump/settings.json settings/selected-basal-profile.json settings/settings.json
gather-pump-data = ! bash -c "openaps get-basal-status; openaps get-pump-details; openaps monitor-pump-history;  openaps get-settings"
gather-clean-data = ! bash -c "openaps monitor-cgm && openaps gather-pump-data"
do-oref0 = ! echo DO Disabled
enact-oref0 = ! echo ENACT Disabled
do-everything = ! bash -c "(openaps preflight && openaps gather-clean-data && openaps do-oref0 && openaps enact-oref0);  openaps report-night$
ping = ! bash -c "echo PONG! $*" --
pong = ! echo PONG
hello = ! echo hello
okbar = ! bash -c "echo $1" --
report-nightscout = report invoke nightscout/preflight.json nightscout/openaps-status.json nightscout/recent-treatments.json nightscout/uploaded.json nightscout/recent-missing-entries.json nightscout/uploaded-entries.json

[report "model.json"]
device = pump
use = model
reporter = JSON

[report "raw-pump/bg-targets-raw.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "settings/bg-targets.json"]
device = units
to = mg/dL
use = bg_targets
input = raw-pump/bg-targets-raw.json
reporter = JSON

[report "raw-pump/insulin-sensitivities-raw.json"]
device = pump
use = read_insulin_sensitivities
reporter = JSON

[report "settings/insulin-sensitivities.json"]
device = units
to = mg/dL
use = insulin_sensitivities
input = raw-pump/insulin-sensitivities-raw.json
reporter = JSON

[report "monitor/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "oref0-predict/oref0.json"]
use = shell
oref0-iob = oref0-monitor/iob.json
temp-basal = monitor/temp-basal-status.json
reporter = text
json_default = True
oref0-profile = oref0-monitor/profile.json
device = determine-basal
remainder = 
glucose = monitor/glucose.json

[report "raw-pump/pump-history-raw.json"]
hours = 8.0
device = pump
use = iter_pump_hours
reporter = JSON

[repo